package com.lombardo;

import com.lombardo.model.Song;
import com.lombardo.model.SongBook;
import com.lombardo.model.SongRequest;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.*;

public class KaraokeMachine {
    private SongBook mSongBook;
    private BufferedReader mReader;
    private Map<String, String> mMenu;
    private Queue<SongRequest> mSongRequestQueue;

    public KaraokeMachine(SongBook songBook) {
        mSongBook = songBook;
        mReader = new BufferedReader(new InputStreamReader(System.in));
        mSongRequestQueue = new ArrayDeque<>();

        mMenu = new HashMap<String, String>();
        mMenu.put("add", "add a new song");
        mMenu.put("choose", "choose a song to sing");
        mMenu.put("quit", "Exit the program");
        mMenu.put("play", "Play the next song in the queue");
    }

    private String promptAction() throws IOException {
        System.out.printf("There are %d songs available. There are %d songs in the queue. Your options are: %n",
                mSongBook.getSongCount(),
                mSongRequestQueue.size());
        for (Map.Entry<String, String> option : mMenu.entrySet()) {
            System.out.printf("%s - %s %n", option.getKey(), option.getValue());
        }
        System.out.print("Please choose an option: ");
        String choice = mReader.readLine();
        return choice.trim().toLowerCase();
    }

    public void run() {
        String choice = "";
        do {
            try {
                choice = promptAction();
                switch (choice) {
                    case "add":
                        Song song = promptNewSong();
                        mSongBook.addSong(song);
                        System.out.printf("%s was successfully added! %n", song);
                        break;
                    case "choose":
                        String singerName = promptForSingerName();
                        String artist = promptArtist();
                        Song artistSong = promptSongForArtist(artist);
                        SongRequest songRequest = new SongRequest(singerName, artistSong);
                        if (mSongRequestQueue.contains(songRequest)) {
                            System.out.printf("%n%n %s already requested %s %n", singerName, artistSong);
                            break;
                        }
                        mSongRequestQueue.add(songRequest);
                        System.out.printf("You selected %s %n", artistSong);
                        break;
                    case "play":
                        playNext();
                        break;
                    case "quit":
                        System.out.println("thanks for playing");
                        break;
                    default:
                        System.out.println("whoops please try again");
                }
            } catch (IOException ioe) {
                System.out.println("problem with input");
                ioe.printStackTrace();
            }
        }
        while (!choice.equals("quit"));
    }

    private String promptForSingerName() throws IOException {
        System.out.print("Enter the singer's name: ");
        return mReader.readLine();
    }

    public void playNext() {
        SongRequest songRequest = mSongRequestQueue.poll();
        if (songRequest == null) {
            System.out.println("Sorry no songs in the queue");
        } else {
            Song song = songRequest.getSong();
            System.out.printf("%n%n%n Ready %s?  Open %s to hear %s %n",
                    songRequest.getSingerName(),
                    song.getVideoUrl(),
                    song);
        }
    }

    private Song promptNewSong() throws IOException {
        System.out.print("Enter artist name: ");
        String artist = mReader.readLine();
        System.out.print("Enter title: ");
        String title = mReader.readLine();
        System.out.print("Enter youtube url: ");
        String videoUrl = mReader.readLine();

        return new Song(artist, title, videoUrl);
    }


    // uses list util method and feeds it list of artists. List was generated by feeding in a set.
    private String promptArtist() throws IOException {
        System.out.println("Available Artists: ");
        List<String> artists = new ArrayList<>(mSongBook.getArtists());
        int index = promptForIndex(artists);
        return artists.get(index);
    }

    private Song promptSongForArtist(String artist) throws IOException {
        List<Song> songs = mSongBook.getSongsForArtist(artist);
        List<String> songTitles = new ArrayList<>();
        for (Song song : songs) {
            songTitles.add(song.getTitle());
        }
        System.out.printf("Available songs for %s %n", artist);
        int index = promptForIndex(songTitles);
        return songs.get(index);
    }

    // takes a list and returns it looking pretty, asking user to select an option
    private int promptForIndex(List<String> options) throws IOException {
        int count = 1;
        for (String option : options) {
            System.out.printf("%d - %s %n", count, option);
            count++;
        }
        System.out.printf("Your choice: ");
        String optionAsString = mReader.readLine();
        int choice = Integer.parseInt(optionAsString.trim());
        return (choice - 1);
    }
}
